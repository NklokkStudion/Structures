#include <iostream>
#include <algorithm>
#include <cstdlib>

class Rational {
 private:
    int a = 0, b = 1;

 public:
    Rational(int _a = 0, int _b = 1) : a(_a), b(_b) {
        if (b < 0) {
            a = -a;
            b = -b;
        }
        int gcd = std::__gcd(std::abs(a), b);
        a /= gcd;
        b /= gcd;
    }
    static void MakeGood(int& x, int &y) {
        if (y < 0) {
            x = -x;
            y = -y;
        }
        int gcd = std::__gcd(std::abs(x), y);
        x /= gcd;
        y /= gcd;
    }
    int numerator() const {
        int gcd = std::__gcd(std::abs(a), b);
        return a / gcd;
    }
    int denominator() const {
        int gcd = std::__gcd(std::abs(a), b);
        return b / gcd;
    }
    Rational operator+(Rational other) const {
        int lcm = (b * other.b) / std::__gcd(b, other.b);
        return Rational(a * (lcm / b) + other.a * (lcm / other.b), lcm);
    }
    Rational operator-(Rational other) const {
        int lcm = (b * other.b) / std::__gcd(b, other.b);
        return Rational(a * (lcm / b) - other.a * (lcm / other.b), lcm);
    }
    Rational operator*(Rational other) const {
        return Rational(a * other.a, b * other.b);
    }
    Rational operator/(Rational other) const {
        return Rational(a * other.b, b * other.a);
    }
    Rational& operator+=(Rational other) {
        int lcm = (b * other.b) / std::__gcd(b, other.b);
        a = a * (lcm / b) + other.a * (lcm / other.b);
        b = lcm;
        MakeGood(a, b);
        return *this;
    }
    Rational& operator-=(Rational other) {
        int lcm = (b * other.b) / std::__gcd(b, other.b);
        a = a * (lcm / b) - other.a * (lcm / other.b);
        b = lcm;
        MakeGood(a, b);
        return *this;
    }
    Rational& operator*=(Rational other) {
        a *= other.a;
        b *= other.b;
        MakeGood(a, b);
        return *this;
    }
    Rational& operator/=(Rational other) {
        a *= other.b;
        b *= other.a;
        MakeGood(a, b);
        return *this;
    }
    Rational operator+() const {
        return Rational(a, b);
    }
    Rational operator-() const {
        return Rational(-a, b);
    }
    bool operator==(Rational other) const {
        return a * other.b == b * other.a;
    }
    bool operator!=(Rational other) const {
        return a * other.b != b * other.a;
    }
    Rational& operator++() {
        return *this += 1;
    }
    Rational& operator--() {
        return *this -= 1;
    }
    const Rational operator++(int) {
        Rational now = *this;
        ++*this;
        return now;
    }
    const Rational operator--(int) {
        Rational now = *this;
        --*this;
        return now;
    }
};

Rational operator+(int x, Rational c) {
    return Rational(x) + c;
}

Rational operator-(int x, Rational c) {
    return Rational(x) - c;
}

Rational operator*(int x, Rational c) {
    return Rational(x) * c;
}

Rational operator/(int x, Rational c) {
    return Rational(x) / c;
}

std::ostream& operator<<(std::ostream& out, Rational x) {
    out << "  " << x.numerator() << '\n';
    out << "-----" << '\n';
    out << "  " << x.denominator() << '\n';
    return out;
}